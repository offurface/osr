# Generated by Django 2.2.6 on 2019-10-15 09:49

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Coach',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=150, verbose_name='Имя')),
                ('surname', models.CharField(max_length=150, verbose_name='Фамилия')),
                ('patronymic', models.CharField(max_length=150, verbose_name='Отчество')),
                ('telephone', models.CharField(max_length=12, verbose_name='Контактный номер')),
            ],
            options={
                'verbose_name': 'Тренер',
                'verbose_name_plural': 'Тренера',
                'ordering': ('surname',),
            },
        ),
        migrations.CreateModel(
            name='Parent',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=150, verbose_name='Имя')),
                ('surname', models.CharField(max_length=150, verbose_name='Фамилия')),
                ('patronymic', models.CharField(max_length=150, verbose_name='Отчество')),
                ('status', models.CharField(choices=[('Родитель', 'Родитель'), ('Опекун', 'Опекун'), ('Иное', 'Иное')], max_length=15, verbose_name='Статус представителя')),
                ('telephone', models.CharField(max_length=12, verbose_name='Контактный номер')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='Электронная почта')),
            ],
            options={
                'verbose_name': 'Представитель',
                'verbose_name_plural': 'Представители',
                'ordering': ('surname',),
            },
        ),
        migrations.CreateModel(
            name='Physique',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('height', models.DecimalField(decimal_places=1, max_digits=4, verbose_name='Рост')),
                ('weight', models.DecimalField(decimal_places=1, max_digits=4, verbose_name='Вес')),
                ('body_type', models.CharField(max_length=150, verbose_name='Тип тела')),
            ],
            options={
                'verbose_name': 'Телосложение отца и матери',
                'verbose_name_plural': 'Телосложение отца и матери',
                'ordering': ('body_type',),
            },
        ),
        migrations.CreateModel(
            name='Previous_sport',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=250, verbose_name='Наименование')),
                ('years', models.PositiveIntegerField(verbose_name='Лет')),
                ('months', models.PositiveIntegerField(verbose_name='Месяцев')),
                ('rank', models.PositiveIntegerField(verbose_name='Разряд')),
            ],
            options={
                'verbose_name': 'Предыдущий вид спорта',
                'verbose_name_plural': 'Предыдущий вид спорта',
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='Sport_type',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=250, verbose_name='Наименование')),
            ],
            options={
                'verbose_name': 'Вид спорта',
                'verbose_name_plural': 'Виды спорта',
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='Sportsman',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=150, verbose_name='Имя')),
                ('surname', models.CharField(max_length=150, verbose_name='Фамилия')),
                ('patronymic', models.CharField(max_length=150, verbose_name='Отчество')),
                ('date_of_birth', models.DateField(auto_now_add=True, verbose_name='Дата рождения')),
                ('gender', models.CharField(choices=[('М', 'М'), ('Ж', 'Ж')], max_length=10, verbose_name='Пол')),
                ('location', models.TextField(verbose_name='Место жительства')),
                ('telephone', models.CharField(max_length=12, verbose_name='Контактный номер')),
                ('swimming_skills', models.BooleanField(blank=True, verbose_name='Умение плавать')),
                ('school_progress', models.CharField(choices=[('Отл.', 'Отл.'), ('Хор.', 'Хор.'), ('Удов', 'Удов')], max_length=4, verbose_name='Успеваемость в школе')),
                ('sport_desire', models.BooleanField(blank=True, verbose_name='Жедание заниматься спортом')),
                ('coach', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='registry.Coach', verbose_name='Тренер')),
                ('parent', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='registry.Parent', verbose_name='Представитель')),
                ('sport_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='registry.Sport_type', verbose_name='Вид спорта')),
            ],
            options={
                'verbose_name': 'Спортсмен',
                'verbose_name_plural': 'Спортсмены',
                'ordering': ('surname',),
            },
        ),
        migrations.CreateModel(
            name='Survey',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(auto_now_add=True, verbose_name='Дата обследования')),
                ('weight', models.DecimalField(decimal_places=1, max_digits=4, verbose_name='Вес тела (кг)')),
                ('length', models.DecimalField(decimal_places=1, max_digits=4, verbose_name='Длина тела(см)')),
                ('spit_leg_length', models.PositiveIntegerField(verbose_name='Длина ног от вертела(см)')),
                ('torso_length_7', models.DecimalField(decimal_places=1, max_digits=4, verbose_name='Длина туловища от 7-го шейного позвонка(см)')),
                ('arm_span', models.PositiveIntegerField(verbose_name='Размах рук(см)')),
                ('chest_girth_inspiration', models.DecimalField(decimal_places=1, max_digits=4, verbose_name='Обхват грудной клетки на вдохе(см)')),
                ('exhaling_chest', models.DecimalField(decimal_places=1, max_digits=4, verbose_name='Обхват грудной клетки на выдохе(см)')),
                ('excursion_difference', models.DecimalField(decimal_places=1, max_digits=4, verbose_name='Экскурсия(разница)')),
                ('spirometry_yellow', models.PositiveIntegerField(verbose_name='Спирометрия(ЖЕЛ)мл')),
                ('breath_hold_stange', models.DecimalField(decimal_places=1, max_digits=4, verbose_name='Проба с задер.дых.на вдохе(проба Штанге)сек')),
                ('deadweight_dynamometry', models.DecimalField(decimal_places=1, max_digits=4, verbose_name='Становая динамометрия')),
                ('dynamometry_right', models.PositiveIntegerField(verbose_name='Динамометрия правой кисти(кг)')),
                ('dynamometry_left', models.PositiveIntegerField(verbose_name='Динамометрия левой кисти(кг)')),
                ('tallow_mass', models.DecimalField(decimal_places=1, max_digits=4, verbose_name='% жировой массы')),
                ('muscle_mass', models.DecimalField(decimal_places=1, max_digits=4, verbose_name='% мышечной массы')),
                ('open_eyes', models.DecimalField(decimal_places=1, max_digits=4, verbose_name='Открытые глаза (фон)')),
                ('close_eyes', models.DecimalField(decimal_places=1, max_digits=4, verbose_name='Закрытые глаза')),
                ('target', models.DecimalField(decimal_places=1, max_digits=4, verbose_name='Мишень')),
                ('kg', models.DecimalField(decimal_places=1, max_digits=4, verbose_name='PWC Кг мм')),
                ('chss', models.DecimalField(decimal_places=1, max_digits=4, verbose_name='PWC ЧСС')),
                ('arterial_pressure_f', models.DecimalField(decimal_places=1, max_digits=4, verbose_name='Артериальное давление(первое число)')),
                ('arterial_pressure_s', models.DecimalField(decimal_places=1, max_digits=4, verbose_name='Артериальное давление(второе число)')),
                ('mpc', models.DecimalField(decimal_places=1, max_digits=4, verbose_name='МПК мл/мин/кг')),
                ('sportsman', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='registry.Sportsman', verbose_name='Спортсмен')),
            ],
            options={
                'verbose_name': 'Обследование',
                'verbose_name_plural': 'Обследование',
                'ordering': ('date',),
            },
        ),
        migrations.AddField(
            model_name='coach',
            name='sport_type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='registry.Sport_type', verbose_name='Вид спорта'),
        ),
        migrations.CreateModel(
            name='UMO',
            fields=[
                ('survey_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='registry.Survey')),
                ('date_of_pass', models.DateField(auto_now_add=True, verbose_name='Дата прохождения УМО')),
                ('rest', models.PositiveIntegerField(verbose_name='ЭКГ в покое')),
                ('load', models.PositiveIntegerField(verbose_name='ЭКГ с нагрузкой')),
                ('plantometry', models.PositiveIntegerField(verbose_name='Плантометрия')),
                ('cns_functional', models.PositiveIntegerField(verbose_name='Фукц.возможности ЦНС')),
                ('cns_level', models.PositiveIntegerField(verbose_name='Уров.работоспособности ЦНС')),
                ('grv', models.DecimalField(decimal_places=1, max_digits=4, verbose_name='ГРВ')),
                ('golden_ratio', models.PositiveIntegerField(verbose_name='Золотое сечение(0,16-0,62)')),
                ('voltage_index', models.PositiveIntegerField(verbose_name='Индекс напряжения')),
                ('spectral_analysis', models.PositiveIntegerField(verbose_name='Спектральный анализ')),
                ('integral_indicator', models.PositiveIntegerField(verbose_name='Интегральный показатель')),
                ('adaptive_capabilities', models.PositiveIntegerField(verbose_name='Адаптационные возм.организма')),
                ('functional_reserves', models.PositiveIntegerField(verbose_name='Функциональные резервы')),
                ('coach', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='registry.Coach', verbose_name='Тренер')),
                ('sportsman_umo', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='registry.Sportsman', verbose_name='Спортсмен')),
            ],
            options={
                'verbose_name': 'УМО',
                'verbose_name_plural': 'УМО',
                'ordering': ('date_of_pass',),
            },
            bases=('registry.survey',),
        ),
        migrations.CreateModel(
            name='PDK',
            fields=[
                ('survey_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='registry.Survey')),
                ('date_of_test', models.DateField(auto_now_add=True, verbose_name='Дата прохождения тестирования')),
                ('place_of_birth', models.TextField(verbose_name='Место рождения')),
                ('place_of_study', models.CharField(max_length=300, verbose_name='Место обучения')),
                ('sports_facility', models.CharField(max_length=250, verbose_name='Спортивное учреждение')),
                ('past_diseases', models.CharField(max_length=250, verbose_name='Перенесенные заболевания(травмы)')),
                ('chest_shape', models.CharField(choices=[('Уплощенная', 'Уплощенная'), ('Цилиндрическая', 'Цилиндрическая'), ('Коническая', 'Коническая'), ('Нормальная', 'Нормальная')], max_length=15, verbose_name='Форма грудной клетки')),
                ('back_shape', models.CharField(choices=[('Нормальная', 'Нормальная'), ('Плоская', 'Плоская'), ('Плоско-выгнутая', 'Плоско-выгнутая'), ('Сутуловатость', 'Сутуловатость'), ('Круглая', 'Круглая'), ('Кругло-вогнутая', 'Кругло-вогнутая')], max_length=20, verbose_name='Форма спины')),
                ('speed', models.PositiveIntegerField(verbose_name='Скорость%')),
                ('strength', models.PositiveIntegerField(verbose_name='Сила%')),
                ('stamina', models.PositiveIntegerField(verbose_name='Выносливость%')),
                ('coordination', models.PositiveIntegerField(verbose_name='Координация%')),
                ('nervous_system_potential', models.CharField(choices=[('Слабая', 'Слабая'), ('Средне-слабая', 'Средне-слабая'), ('Средняя', 'Средняя'), ('Средне-сильная', 'Средне-сильная'), ('Сильная', 'Сильная')], max_length=15, verbose_name='Потенциал нервной системы')),
                ('run_30', models.DecimalField(decimal_places=1, max_digits=4, verbose_name='Бег 30м')),
                ('jump_place', models.DecimalField(decimal_places=1, max_digits=4, verbose_name='Прыжок в длину с места')),
                ('pull_ups', models.PositiveIntegerField(verbose_name='Подтягивания на перекладине')),
                ('concept', models.DecimalField(decimal_places=2, max_digits=4, verbose_name='Концепт(техническая гребля)')),
                ('run_1500', models.DecimalField(decimal_places=2, max_digits=4, verbose_name='Бег 1500м')),
                ('concept_500', models.DecimalField(decimal_places=2, max_digits=4, verbose_name='Концепт 500м')),
                ('motivation', models.CharField(choices=[('Низкая', 'Низкая'), ('Средняя', 'Средняя'), ('Высокая', 'Высокая')], max_length=15, verbose_name='Мотивация к тренеровочному процессу')),
                ('willed_qualities', models.CharField(choices=[('Не развитый', 'Не развитый'), ('Низкий', 'Низкий'), ('Высокий', 'Высокий')], max_length=15, verbose_name='Развитие волевых качеств')),
                ('coach', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='registry.Coach', verbose_name='Тренер')),
                ('parent', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='registry.Parent', verbose_name='Представитель')),
                ('physique_of_father', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='body_father', to='registry.Physique', verbose_name='Тип телосложения отца')),
                ('physique_of_mother', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='body_mother', to='registry.Physique', verbose_name='Тип телосложения матери')),
                ('previous_sport', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='registry.Previous_sport', verbose_name='Предыдущ. вид спорта')),
                ('recommendations', models.ManyToManyField(to='registry.Sport_type', verbose_name='Рекомендации')),
                ('sportsman_pdk', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='registry.Sportsman', verbose_name='Участник тестир.')),
            ],
            options={
                'verbose_name': 'ПДК',
                'verbose_name_plural': 'ПДК',
                'ordering': ('date_of_test',),
            },
            bases=('registry.survey',),
        ),
        migrations.CreateModel(
            name='Functional_potential',
            fields=[
                ('survey_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='registry.Survey')),
                ('date_of_fp', models.DateField(auto_now_add=True, verbose_name='Дата')),
                ('vt', models.DecimalField(decimal_places=1, max_digits=4, verbose_name='Вт')),
                ('vt_kg', models.DecimalField(decimal_places=2, max_digits=4, verbose_name='Вт/кг')),
                ('mpk_lmin', models.DecimalField(decimal_places=2, max_digits=4, verbose_name='МПК,л/мин')),
                ('la_max', models.DecimalField(decimal_places=1, max_digits=4, verbose_name='La макс, ммоль/л')),
                ('potential', models.DecimalField(decimal_places=1, max_digits=4, verbose_name='180+120/2 град/с н (потенциал)')),
                ('realization', models.DecimalField(decimal_places=2, max_digits=4, verbose_name='180+120/2 град/с н./кг(реализация)')),
                ('speed_power_balance', models.DecimalField(decimal_places=2, max_digits=4, verbose_name='Баланс Скорость-сила 360/30 %')),
                ('romberg_coefficient', models.DecimalField(decimal_places=1, max_digits=4, verbose_name='Коэффициент Ромберга')),
                ('average', models.DecimalField(decimal_places=2, max_digits=4, verbose_name='Средние(все)')),
                ('omega', models.DecimalField(decimal_places=2, max_digits=4, verbose_name='Сигма')),
                ('sportsman_fp', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='registry.Sportsman', verbose_name='Спортсмен')),
            ],
            options={
                'verbose_name': 'Функциональный потенциал',
                'verbose_name_plural': 'Функц. потенциал',
                'ordering': ('date',),
            },
            bases=('registry.survey',),
        ),
    ]
